version: 2
jobs:
  verify:
    working_directory: ~/status-board
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install Global Packages
          command: |
            sudo npm install -g greenkeeper-lockfile@1
            yarn global add npmvet nsp
      - run:
          name: Install Local Packages
          command: yarn install
      - run:
          name: Updating Lockfiles
          command: |
            greenkeeper-lockfile-update
            greenkeeper-lockfile-upload
            greenkeeper-shrinkwrap-update
            greenkeeper-shrinkwrap-upload
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: NPM Vet
          command: yarn verify:npmvet
      - run:
          name: Node Security
          command: yarn verify:nsp
      - run:
          name: Create TSLint report directory
          command: mkdir reports &&  mkdir reports/tslint
      - run:
          name: TSLint
          command: yarn tslint
      - store_artifacts:
          path: reports/tslint
  test-node-6:
    working_directory: ~/status-board
    docker:
      - image: circleci/node:6
    steps:
      - checkout
      - run:
          name: Install Local Packages
          command: yarn install --ignore-engines --frozen-lockfile
      - run:
          name: Test Suite
          command: yarn test:ci
  test-node-7:
    working_directory: ~/status-board
    docker:
      - image: circleci/node:7
    steps:
      - checkout
      - run:
          name: Install Local Packages
          command: yarn install --ignore-engines --frozen-lockfile
      - run:
          name: Test Suite
          command: yarn test:ci
  test-node-8:
    working_directory: ~/status-board
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - run:
          name: Install Local Packages
          command: yarn install --frozen-lockfile
      - run:
          name: Test Suite
          command: yarn test:ci
  test-node-9:
    working_directory: ~/status-board
    docker:
      - image: circleci/node:9
    steps:
      - checkout
      - run:
          name: Install Local Packages
          command: yarn install --ignore-engines --frozen-lockfile
      - run:
          name: Test Suite
          command: yarn test:ci
  coverage-build-deploy:
    working_directory: ~/status-board
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install Local Packages
          command: yarn install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Coverage
          environment:
            JEST_JUNIT_OUTPUT: reports/jest/jest-test-results.xml
          command: |
            ./cc-test-reporter before-build
            yarn test:coverage:ci
            ./cc-test-reporter after-build --exit-code $?
            yarn test:coverage:codecov
      - store_artifacts:
          path: coverage
      - run:
          name: Build JavaScript
          command: yarn ts:build
      - run:
          name: Semantic Release
          command: yarn semantic-release
      - store_artifacts:
          path: reports/jest
      - store_test_results:
          path: reports

workflows:
  version: 2
  pipeline:
    jobs:
      - verify
      - test-node-6:
          requires:
            - verify
      - test-node-7:
          requires:
            - verify
      - test-node-8:
          requires:
            - verify
      - test-node-9:
          requires:
            - verify
      - coverage-build-deploy:
          requires:
            - test-node-6
            - test-node-7
            - test-node-8
            - test-node-9